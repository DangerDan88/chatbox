let days = [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
(module.exports.fomartDateTime = () => {}),
  (module.exports.formatTime = a => {
    this.date = a ? new Date(a) : new Date();
    let b = `${((a, b) =>
      13 <= a
        ? ((a -= 12), `${a}:${b} PM`)
        : 12 === a
        ? `${a}:${b}:${c} PM`
        : 24 === a
        ? `${12}:${b} AM`
        : `${a}:${b} AM`)(this.date.getHours(), this.date.getMinutes())} `;
    return b;
  }),
  (module.exports.formatDate = a => {
    if (typeof a === Number) {
      let b, c, d;
      return (
        (this.date = a ? new Date(1e3 * a) : new Date()),
        (d = days[this.date.getDay()]),
        (c = months[this.date.getMonth()]),
        (b = `${d}, ${c} ${this.date.getFullYear()}`),
        b
      );
    }
    return (
      (today = days[this.date.getDay()]),
      (thisMonth = months[this.date.getMonth()]),
      (b = this.date.getDate()),
      (currentDate = `${today}, ${b} ${thisMonth} ${this.date.getFullYear()}`),
      currentDate
    );
  }),
  (module.exports.formatTimeAgo = a => {
    var b,
      c = new Date(),
      d = Math.floor(c.getTime() / 1e3);
    return (
      (b = /[a-z]/i.test(a) ? d - Date.parse(a) / 1e3 : d - a / 1e3),
      172800 < b
        ? "a few days ago"
        : 86400 < b
        ? "yesterday"
        : 3600 < b
        ? "a few hours ago"
        : 1800 < b
        ? "half an hour ago"
        : 60 < b
        ? Math.floor(b / 60) + " minutes ago"
        : 60 > b
        ? "a few seconds ago"
        : void 0
    );
  });
